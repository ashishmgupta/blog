{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Overview"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"BlockOFACCountries/","text":"Block OFAC Countries We create a conditional access policy to block access from OFAC countries to all apps. ALL users would be blocked from OFAC countries except the currently logged in user. # Connect to AzureAD and get current logged in user $TenantDetails = $NULL $CurrentlyLoggedInUser = $NULL $OnMicrosoftDomain = $NULL $connection = $NULL try { $AzureADSession = Get-AzureADCurrentSessionInfo $CurrentlyLoggedInUser = $AzureADSession.Account | select -ExpandProperty Id Write-Host \"Already connected to : $AzureADSession.TenantDomain as $CurrentlyLoggedInUser\" $CurrentUserId = Get-AzureADUser -Filter \"UserPrincipalName eq '$CurrentlyLoggedInUser'\" | select -ExpandProperty ObjectId } catch [Microsoft.Open.Azure.AD.CommonLibrary.AadNeedAuthenticationException] { Write-Host \"You're not connected to AzureAD. Connect now...\"; Write-Host \"You're not connected to AzureAD\"; $connection = Connect-AzureAD $AzureADSession = Get-AzureADCurrentSessionInfo $CurrentlyLoggedInUser = $AzureADSession.Account | select -ExpandProperty Id Write-Host \"Connected to : $AzureADSession.TenantDomain as $CurrentlyLoggedInUser\" $CurrentUserId = Get-AzureADUser -Filter \"UserPrincipalName eq '$CurrentlyLoggedInUser'\" | select -ExpandProperty ObjectId } $NamedLocationPolicyName = \"OFAC Countries\" $NamedLocationPolicy = Get-AzureADMSNamedLocationPolicy | Where-Object {$_.DisplayName -eq $NamedLocationPolicy} if ($NamedLocationPolicy -eq $null) { # Create a named location policy which includes all the OFAC Countries. $NamedLocationPolicy = New-AzureADMSNamedLocationPolicy -OdataType \"#microsoft.graph.countryNamedLocation\" -DisplayName $NamedLocationPolicyName -CountriesAndRegions \"BY\",\"BI\",\"BA\",\"CD\",\"CF\",\"CI\",\"CN\",\"CU\",\"IQ\",\"IR\",\"KP\",\"LR\",\"MD\",\"ME\",\"MK\",\"NI\",\"RU\",\"RS\",\"SD\",\"SS\",\"SY\",\"UA\",\"VE\",\"YE\",\"ZW\",\"AU\" -IncludeUnknownCountriesAndRegions $false Write-Host \"Named location policy : \" + $NamedLocationPolicyName + \" has been created.\" Write-Host \"Countries included : \" + $NamedLocationPolicyName.CountriesAndRegions }else{ Write-Host \"Named location policy : \" + $NamedLocationPolicyName + \" already exists.\" Write-Host \"Countries included : \" + $NamedLocationPolicyName.CountriesAndRegions } # Create the conditional access policy to block access from all OFAC countries to all apps for all users except the currently logged in user $conditions = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessConditionSet $conditions.Applications = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessApplicationCondition $conditions.Applications.IncludeApplications = \"all\" $conditions.Users = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessUserCondition $conditions.Users.IncludeUsers = \"all\" $conditions.Users.ExcludeUsers = $CurrentUserId $conditions.Locations = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessLocationCondition $conditions.Locations.IncludeLocations = $NamedLocationPolicy.Id $controls = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessGrantControls $controls._Operator = \"OR\" $controls.BuiltInControls = \"block\" New-AzureADMSConditionalAccessPolicy -DisplayName \"Block OFAC countries\" -State \"Enabled\" -Conditions $conditions -GrantControls $controls","title":"Block OFAC Countries"},{"location":"CreateEmergencyUser/","text":"# Create an emergency user # Create an emergency user $EmergencyUserUPNPrefix = \"EmUser4\" $UserDisplayName = \"EmergencyUser\" $Connection = Connect-AzureAD $TenantDomain = $Connection.TenantDomain $CurrentlyLoggedInUser = $connection.Account | select -ExpandProperty Id $CurrentUserId = Get-AzureADUser -Filter \"UserPrincipalName eq '$CurrentlyLoggedInUser'\" | select -ExpandProperty ObjectId $CurrentlyLoggedInUser = $connection.Account | select -ExpandProperty Id $OnMicrosoftDomain = $CurrentlyLoggedInUser.substring($CurrentlyLoggedInUser.IndexOf('@')) $UserPrincipalName = $EmergencyUserUPNPrefix+$OnMicrosoftDomain Add-Type -AssemblyName System.Web $UserPassword = [System.Web.Security.Membership]::GeneratePassword(32,2) $PasswordProfile = New-Object -TypeName Microsoft.Open.AzureAD.Model.PasswordProfile $PasswordProfile.Password = $UserPassword $UserPassword $NewUser = New-AzureADUser -DisplayName $UserDisplayName -PasswordProfile $PasswordProfile -AccountEnabled $true -UserPrincipalName $UserPrincipalName -MailNickName \"EmUser\" # Adding the new user to Global Admin role $GlobalAdminRole = Get-AzureADDirectoryRole | Where-Object { $_.displayName -eq \"Global Administrator\"} Add-AzureADDirectoryRoleMember -ObjectId $GlobalAdminRole.ObjectId -RefObjectId $NewUser.ObjectId","title":"Create Emergency User"},{"location":"DisableBasicAuth/","text":"Disable Basic Authentication We create an authentication policy which has by default basic auth disabled for all protocols. And the set the default authentication policy for the whole organization the newly created authentication policy New-AuthenticationPolicy \"Disable all BasicAuth\" Set-OrganizationConfig -DefaultAuthenticationPolicy \"Disable all BasicAuth\" Check the newly created authentication policy : The default authentication policy is set to the newly created authentication policy. Get-OrganizationConfig | select DefaultAuthenticationPolicy We can also check the Microsoft Admin Center. Go to Microsoft 365 Admin Center Settings > Org Settings > Modern Authentication All the settings except the \"Turn on modern authentication for Outlook 2013 for Windows and later (recommended)\" should be unchecked.","title":"Disable basic authentication"},{"location":"EnableSelfServicePasswordReset/","text":"","title":"Enable Self Service Password Reset"},{"location":"ImplementMFA/","text":"Create a conditional Acesss Policy to enforce all MFA on all users excluding an emergency Azure cloud-only Account $EmergencyUser = $null $Connection = Connect-AzureAD $TenantDomain = $Connection.TenantDomain $CurrentlyLoggedInUser = $connection.Account | select -ExpandProperty Id $CurrentUserId = Get-AzureADUser -Filter \"UserPrincipalName eq '$CurrentlyLoggedInUser'\" | select -ExpandProperty ObjectId $CurrentlyLoggedInUser = $connection.Account | select -ExpandProperty Id $OnMicrosoftDomain = $CurrentlyLoggedInUser.substring($CurrentlyLoggedInUser.IndexOf('@')) try { $EmergencyUser = Get-AzureAdUser -ObjectId 'EmUser@redteamsimulation.onmicrosoft.com' } catch { # Create an emergency user $EmergencyUserUPNPrefix = \"EmUser\" $UserDisplayName = \"EmergencyUser\" $UserPrincipalName = $EmergencyUserUPNPrefix+$OnMicrosoftDomain Add-Type -AssemblyName System.Web $UserPassword = [System.Web.Security.Membership]::GeneratePassword(32,2) $PasswordProfile = New-Object -TypeName Microsoft.Open.AzureAD.Model.PasswordProfile $PasswordProfile.Password = $UserPassword $UserPassword $EmergencyUser = New-AzureADUser -DisplayName $UserDisplayName -PasswordProfile $PasswordProfile -AccountEnabled $true -UserPrincipalName $UserPrincipalName -MailNickName \"EmUser\" # Adding the new user to Global Admin role $GlobalAdminRole = Get-AzureADDirectoryRole | Where-Object { $_.displayName -eq \"Global Administrator\"} Add-AzureADDirectoryRoleMember -ObjectId $GlobalAdminRole.ObjectId -RefObjectId $EmergencyUser.ObjectId } $conditions = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessConditionSet $conditions.Applications = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessApplicationCondition $conditions.Applications.IncludeApplications = \"all\" $conditions.Users = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessUserCondition $conditions.Users.IncludeUsers = \"all\" $conditions.Users.ExcludeUsers = $EmergencyUser.ObjectId $controls = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessGrantControls $controls._Operator = \"OR\" $controls.BuiltInControls = \"mfa\" New-AzureADMSConditionalAccessPolicy -DisplayName \"Enforce MFA on all users\" -State \"Enabled\" -Conditions $conditions -GrantControls $controls","title":"Implement MFA"},{"location":"RestrictExtarnelCollaboration/","text":"","title":"Restrict Extarnel Collaboration"},{"location":"SetupAzureADAppForSplunk/","text":"Author - Ashish Gupta This script creates a new Azure AD application and sets the Application and Delegated permissions for specific API (O365) $TenantDetails = $NULL $CurrentlyLoggedInUser = $NULL $OnMicrosoftDomain = $NULL $connection = $NULL try { $AzureADSession = Get-AzureADCurrentSessionInfo $CurrentlyLoggedInUser = $AzureADSession.Account | select -ExpandProperty Id Write-Host \"Already connected to : $AzureADSession.TenantDomain as $CurrentlyLoggedInUser\" $CurrentUserId = Get-AzureADUser -Filter \"UserPrincipalName eq '$CurrentlyLoggedInUser'\" | select -ExpandProperty ObjectId } catch [Microsoft.Open.Azure.AD.CommonLibrary.AadNeedAuthenticationException] { Write-Host \"You're not connected to AzureAD. Connect now...\"; Write-Host \"You're not connected to AzureAD\"; $connection = Connect-AzureAD $AzureADSession = Get-AzureADCurrentSessionInfo $CurrentlyLoggedInUser = $AzureADSession.Account | select -ExpandProperty Id Write-Host \"Connected to : $AzureADSession.TenantDomain as $CurrentlyLoggedInUser\" $CurrentUserId = Get-AzureADUser -Filter \"UserPrincipalName eq '$CurrentlyLoggedInUser'\" | select -ExpandProperty ObjectId } $CurrentDateTime = Get-Date -UFormat \"%Y-%m-%d_%H-%m-%S\" $ApplicationDisplayName = \"aaa_\" +$CurrentDateTime Get the service principal for O365 and Microsoft Graph $ServicePrincipalO365API = Get-AzureADServicePrincipal -All $true | ? { $ .DisplayName -eq \"Office 365 Management APIs\" } $ServicePrincipalMicrosoftGraph = Get-AzureADServicePrincipal -All $true | ? { $ .DisplayName -eq \"Microsoft Graph\" } Get all application permissions for Microsoft Graph $ServicePrincipalMicrosoftGraphAppRoles = $ServicePrincipalMicrosoftGraph.AppRoles | Where-Object {$_.Value -match \"\\bDirectory.Read.All\\b|\\bAuditLog.Read.All\\b|\\bPolicy.Read.All\\b|\\bReports.Read.All\\b\"} Get all delegated permissions for Microsoft Graph $ServicePrincipalMicrosoftGraphDelegatedRoles = $ServicePrincipalMicrosoftGraph.Oauth2Permissions | Where-Object {$_.Value -match \"\\bDirectory.Read.All\\b|\\bAuditLog.Read.All\\b|\\bPolicy.Read.All\\b|\\bReports.Read.All\\b\"} Get all application permissions for O365 API $ServicePrincipalO365APIAppRoles = $ServicePrincipalO365API.AppRoles | Where-Object {$_.Value -match \"\\bActivityFeed.Read\\b|\\bActivityFeed.ReadDlp\\b|\\bServiceHealth.Read\\b\"} Get all delegated permissions for O365 API $ServicePrincipalO365APIDelegatedRoles = $ServicePrincipalO365API.Oauth2Permissions | Where-Object {$_.Value -match \"\\bActivityFeed.Read\\b|\\bActivityFeed.ReadDlp\\b|\\bServiceHealth.Read\\b\"} Create a Required Resource Access object for Office 365 $RequiredResourceAccessO365API = New-Object -TypeName \"Microsoft.Open.AzureAD.Model.RequiredResourceAccess\" $RequiredResourceAccessO365API.ResourceAppId = $ServicePrincipalO365API.AppId $ServicePrincipalO365APIAppRolesSelectedPermissions = @() Get all the Resource Access objects for the Application permissions foreach ($ServicePrincipalO365APIAppRole in $ServicePrincipalO365APIAppRoles) { $Permission = New-Object -TypeName \"Microsoft.Open.AzureAD.Model.ResourceAccess\" -ArgumentList $ServicePrincipalO365APIAppRole.Id,\"Role\" $ServicePrincipalO365APIAppRolesSelectedPermissions += $Permission } <# $ActivityReportsReadAppPermission = New-Object -TypeName \"Microsoft.Open.AzureAD.Model.ResourceAccess\" -ArgumentList \"594c1fb6-4f81-4475-ae41-0c394909246c\",\"Role\" $ServicePrincipalO365APIAppRolesSelectedPermissions += $ActivityReportsReadAppPermission $ActivityFeedReadDlpAppPermission = New-Object -TypeName \"Microsoft.Open.AzureAD.Model.ResourceAccess\" -ArgumentList \"4807a72c-ad38-4250-94c9-4eabfe26cd55\",\"Role\" $ServicePrincipalO365APIAppRolesSelectedPermissions += $ActivityFeedReadDlpAppPermission $ServiceHealthReadAppPermission = New-Object -TypeName \"Microsoft.Open.AzureAD.Model.ResourceAccess\" -ArgumentList \"e2cea78f-e743-4d8f-a16a-75b629a038ae\",\"Role\" $ServicePrincipalO365APIAppRolesSelectedPermissions += $ServiceHealthReadAppPermission > Get all the Resource Access objects for the Delegated permissions foreach ($ServicePrincipalO365APIDelegatedRole in $ServicePrincipalO365APIDelegatedRoles) { $Permission = New-Object -TypeName \"Microsoft.Open.AzureAD.Model.ResourceAccess\" -ArgumentList $ServicePrincipalO365APIDelegatedRole.Id,\"Scope\" $ServicePrincipalO365APIAppRolesSelectedPermissions += $Permission } $ServicePrincipalO365APIAppRolesSelectedPermissions = 'e2cea78f-e743-4d8f-a16a-75b629a038ae','594c1fb6-4f81-4475-ae41-0c394909246c','4807a72c-ad38-4250-94c9-4eabfe26cd55','17f1c501-83cd-414c-9064-cd10f7aef836','b3b78c39-cb1d-4d17-820a-25d9196a800e','69784729-33e3-471d-b130-744ce05343e5','825c9d21-ba03-4e97-8007-83f020ff8c0f' Assign all the permissions to the required Resource access for the O365 API $RequiredResourceAccessO365API.ResourceAccess = $ServicePrincipalO365APIAppRolesSelectedPermissions Create the Password credential for the new app Add-Type -AssemblyName System.Web $ApplicationPassword =[System.Web.Security.Membership]::GeneratePassword(32,2) $ApplicationPassword = $ApplicationPassword.Replace(\"+\",\" \") $ApplicationPassword = $ApplicationPassword.Replace(\"-\",\" \") $keyId = (New-Guid).ToString(); $fromDate = [System.DateTime]::Now $durationInYears = 5 $endDate = $fromDate.AddYears($durationInYears) $Applicationkey = New-Object Microsoft.Open.AzureAD.Model.PasswordCredential($null, $endDate, $keyId, $fromDate, $ApplicationPassword) Create the new app with the password cred $aadApplication = New-AzureADApplication -DisplayName $ApplicationDisplayName -PasswordCredentials $Applicationkey write-output(\"Application created\") Set the permissions Set-AzureADApplication -ObjectId $aadApplication.ObjectId -RequiredResourceAccess $RequiredResourceAccessO365API write-output(\"Application permissions set\")","title":"Setup AzureAD App For Splunk"},{"location":"SetupAzureADAppForSplunk/#author-ashish-gupta","text":"","title":"Author - Ashish Gupta"},{"location":"SetupAzureADAppForSplunk/#this-script-creates-a-new-azure-ad-application-and-sets-the-application-and-delegated-permissions-for-specific-api-o365","text":"$TenantDetails = $NULL $CurrentlyLoggedInUser = $NULL $OnMicrosoftDomain = $NULL $connection = $NULL try { $AzureADSession = Get-AzureADCurrentSessionInfo $CurrentlyLoggedInUser = $AzureADSession.Account | select -ExpandProperty Id Write-Host \"Already connected to : $AzureADSession.TenantDomain as $CurrentlyLoggedInUser\" $CurrentUserId = Get-AzureADUser -Filter \"UserPrincipalName eq '$CurrentlyLoggedInUser'\" | select -ExpandProperty ObjectId } catch [Microsoft.Open.Azure.AD.CommonLibrary.AadNeedAuthenticationException] { Write-Host \"You're not connected to AzureAD. Connect now...\"; Write-Host \"You're not connected to AzureAD\"; $connection = Connect-AzureAD $AzureADSession = Get-AzureADCurrentSessionInfo $CurrentlyLoggedInUser = $AzureADSession.Account | select -ExpandProperty Id Write-Host \"Connected to : $AzureADSession.TenantDomain as $CurrentlyLoggedInUser\" $CurrentUserId = Get-AzureADUser -Filter \"UserPrincipalName eq '$CurrentlyLoggedInUser'\" | select -ExpandProperty ObjectId } $CurrentDateTime = Get-Date -UFormat \"%Y-%m-%d_%H-%m-%S\" $ApplicationDisplayName = \"aaa_\" +$CurrentDateTime","title":"This script creates a new Azure AD application and sets the Application and Delegated permissions for specific API (O365)"},{"location":"SetupAzureADAppForSplunk/#get-the-service-principal-for-o365-and-microsoft-graph","text":"$ServicePrincipalO365API = Get-AzureADServicePrincipal -All $true | ? { $ .DisplayName -eq \"Office 365 Management APIs\" } $ServicePrincipalMicrosoftGraph = Get-AzureADServicePrincipal -All $true | ? { $ .DisplayName -eq \"Microsoft Graph\" }","title":"Get the service principal for O365 and Microsoft Graph"},{"location":"SetupAzureADAppForSplunk/#get-all-application-permissions-for-microsoft-graph","text":"$ServicePrincipalMicrosoftGraphAppRoles = $ServicePrincipalMicrosoftGraph.AppRoles | Where-Object {$_.Value -match \"\\bDirectory.Read.All\\b|\\bAuditLog.Read.All\\b|\\bPolicy.Read.All\\b|\\bReports.Read.All\\b\"}","title":"Get all application permissions for Microsoft Graph"},{"location":"SetupAzureADAppForSplunk/#get-all-delegated-permissions-for-microsoft-graph","text":"$ServicePrincipalMicrosoftGraphDelegatedRoles = $ServicePrincipalMicrosoftGraph.Oauth2Permissions | Where-Object {$_.Value -match \"\\bDirectory.Read.All\\b|\\bAuditLog.Read.All\\b|\\bPolicy.Read.All\\b|\\bReports.Read.All\\b\"}","title":"Get all delegated permissions for Microsoft Graph"},{"location":"SetupAzureADAppForSplunk/#get-all-application-permissions-for-o365-api","text":"$ServicePrincipalO365APIAppRoles = $ServicePrincipalO365API.AppRoles | Where-Object {$_.Value -match \"\\bActivityFeed.Read\\b|\\bActivityFeed.ReadDlp\\b|\\bServiceHealth.Read\\b\"}","title":"Get all application permissions for O365 API"},{"location":"SetupAzureADAppForSplunk/#get-all-delegated-permissions-for-o365-api","text":"$ServicePrincipalO365APIDelegatedRoles = $ServicePrincipalO365API.Oauth2Permissions | Where-Object {$_.Value -match \"\\bActivityFeed.Read\\b|\\bActivityFeed.ReadDlp\\b|\\bServiceHealth.Read\\b\"}","title":"Get all delegated permissions for O365 API"},{"location":"SetupAzureADAppForSplunk/#create-a-required-resource-access-object-for-office-365","text":"$RequiredResourceAccessO365API = New-Object -TypeName \"Microsoft.Open.AzureAD.Model.RequiredResourceAccess\" $RequiredResourceAccessO365API.ResourceAppId = $ServicePrincipalO365API.AppId $ServicePrincipalO365APIAppRolesSelectedPermissions = @()","title":"Create a Required Resource Access object for Office 365"},{"location":"SetupAzureADAppForSplunk/#get-all-the-resource-access-objects-for-the-application-permissions","text":"foreach ($ServicePrincipalO365APIAppRole in $ServicePrincipalO365APIAppRoles) { $Permission = New-Object -TypeName \"Microsoft.Open.AzureAD.Model.ResourceAccess\" -ArgumentList $ServicePrincipalO365APIAppRole.Id,\"Role\" $ServicePrincipalO365APIAppRolesSelectedPermissions += $Permission } <# $ActivityReportsReadAppPermission = New-Object -TypeName \"Microsoft.Open.AzureAD.Model.ResourceAccess\" -ArgumentList \"594c1fb6-4f81-4475-ae41-0c394909246c\",\"Role\" $ServicePrincipalO365APIAppRolesSelectedPermissions += $ActivityReportsReadAppPermission $ActivityFeedReadDlpAppPermission = New-Object -TypeName \"Microsoft.Open.AzureAD.Model.ResourceAccess\" -ArgumentList \"4807a72c-ad38-4250-94c9-4eabfe26cd55\",\"Role\" $ServicePrincipalO365APIAppRolesSelectedPermissions += $ActivityFeedReadDlpAppPermission $ServiceHealthReadAppPermission = New-Object -TypeName \"Microsoft.Open.AzureAD.Model.ResourceAccess\" -ArgumentList \"e2cea78f-e743-4d8f-a16a-75b629a038ae\",\"Role\" $ServicePrincipalO365APIAppRolesSelectedPermissions += $ServiceHealthReadAppPermission","title":"Get all the Resource Access objects for the Application permissions"},{"location":"SetupAzureADAppForSplunk/#_1","text":"","title":"&gt;"},{"location":"SetupAzureADAppForSplunk/#get-all-the-resource-access-objects-for-the-delegated-permissions","text":"foreach ($ServicePrincipalO365APIDelegatedRole in $ServicePrincipalO365APIDelegatedRoles) { $Permission = New-Object -TypeName \"Microsoft.Open.AzureAD.Model.ResourceAccess\" -ArgumentList $ServicePrincipalO365APIDelegatedRole.Id,\"Scope\" $ServicePrincipalO365APIAppRolesSelectedPermissions += $Permission }","title":"Get all the Resource Access objects for the Delegated permissions"},{"location":"SetupAzureADAppForSplunk/#serviceprincipalo365apiapprolesselectedpermissions-e2cea78f-e743-4d8f-a16a-75b629a038ae594c1fb6-4f81-4475-ae41-0c394909246c4807a72c-ad38-4250-94c9-4eabfe26cd5517f1c501-83cd-414c-9064-cd10f7aef836b3b78c39-cb1d-4d17-820a-25d9196a800e69784729-33e3-471d-b130-744ce05343e5825c9d21-ba03-4e97-8007-83f020ff8c0f","text":"","title":"$ServicePrincipalO365APIAppRolesSelectedPermissions = 'e2cea78f-e743-4d8f-a16a-75b629a038ae','594c1fb6-4f81-4475-ae41-0c394909246c','4807a72c-ad38-4250-94c9-4eabfe26cd55','17f1c501-83cd-414c-9064-cd10f7aef836','b3b78c39-cb1d-4d17-820a-25d9196a800e','69784729-33e3-471d-b130-744ce05343e5','825c9d21-ba03-4e97-8007-83f020ff8c0f'"},{"location":"SetupAzureADAppForSplunk/#assign-all-the-permissions-to-the-required-resource-access-for-the-o365-api","text":"$RequiredResourceAccessO365API.ResourceAccess = $ServicePrincipalO365APIAppRolesSelectedPermissions","title":"Assign all the permissions to the required Resource access for the O365 API"},{"location":"SetupAzureADAppForSplunk/#create-the-password-credential-for-the-new-app","text":"Add-Type -AssemblyName System.Web $ApplicationPassword =[System.Web.Security.Membership]::GeneratePassword(32,2) $ApplicationPassword = $ApplicationPassword.Replace(\"+\",\" \") $ApplicationPassword = $ApplicationPassword.Replace(\"-\",\" \") $keyId = (New-Guid).ToString(); $fromDate = [System.DateTime]::Now $durationInYears = 5 $endDate = $fromDate.AddYears($durationInYears) $Applicationkey = New-Object Microsoft.Open.AzureAD.Model.PasswordCredential($null, $endDate, $keyId, $fromDate, $ApplicationPassword)","title":"Create the Password credential for the new app"},{"location":"SetupAzureADAppForSplunk/#create-the-new-app-with-the-password-cred","text":"$aadApplication = New-AzureADApplication -DisplayName $ApplicationDisplayName -PasswordCredentials $Applicationkey write-output(\"Application created\")","title":"Create the new app with the password cred"},{"location":"SetupAzureADAppForSplunk/#set-the-permissions","text":"Set-AzureADApplication -ObjectId $aadApplication.ObjectId -RequiredResourceAccess $RequiredResourceAccessO365API write-output(\"Application permissions set\")","title":"Set the permissions"}]}